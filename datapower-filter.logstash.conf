filter {
  # Example to remove health checks from Logs
  if "GET for /healthCheck" in [message] { drop { } }

  # Example to remove tokens from Logs
  mutate {
    gsub => [
      "message", "\(jwt, jwt='[A-Za-z0-9\-\._~\+\/]+=*", "<<JWT_TOKEN_REMOVED>>",
      "message", "\(custom, entry='[A-Za-z0-9\-\._~\+\/]+=*", "<<OAuth_TOKEN_REMOVED>>",
      "message", "saml-signature authentication succeeded with \([A-Za-z0-9\-\.,_~': =\+\/]*", "saml-signature authentication succeeded with <<SAML_TOKEN_REMOVED>>"
    ]
  }

  grok {
    match => [ "message", "\<%{INT:seqNr}\>%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{DATA:dpName}%{SPACE} %{GREEDYDATA:temp_message}" ]
  }

  grok {
    match => {"temp_message" => [ "\[%{DATA:dpDomain}\]\[%{BASE16NUM:dpEventCode}\]\[%{DATA:dpObject}\]\[%{LOGLEVEL:dpLevel}\]%{SPACE} %{GREEDYDATA:temp_message}",
                                  "\[%{BASE16NUM:dpEventCode}\]\[%{DATA:dpCategory}]\[%{LOGLEVEL:dpLevel}]%{SPACE}%{GREEDYDATA:temp_message}"
                                      ]}
    overwrite => [ "temp_message" ]
  }

  grok {
    match => {"temp_message" => [ "%{DATA:dpObjectType}\(%{DATA:dpObjectName}\):%{SPACE}trans\(%{NUMBER:dpTransId}\)%{GREEDYDATA:temp_message}"
                                ]}
    overwrite => [ "temp_message" ]
    add_tag => [ "filter1" ]
  }

  if "filter1" in [tags] {
    grok {
      match => {"temp_message" => [ "\[%{WORD:dpDirection}\]\[%{IP:dpSourceIP}\]%{SPACE}gtid\(%{BASE16NUM:dpGlobalTransId}\)%{GREEDYDATA:temp_message}",
                                    "\[%{WORD:dpDirection}\]%{SPACE}gtid\(%{BASE16NUM:dpGlobalTransId}\)%{GREEDYDATA:temp_message}",
                                    "\[%{IP:dpSourceIP}\]%{SPACE}gtid\(%{BASE16NUM:dpGlobalTransId}\)%{GREEDYDATA:temp_message}",
                                    "\[%{IP:dpSourceIP}\]%{GREEDYDATA:temp_message}",
                                    "%{SPACE}gtid\(%{BASE16NUM:dpGlobalTransId}\)%{GREEDYDATA:temp_message}"
                                  ]}
      overwrite => [ "temp_message" ]
    }
  }
  else {
    grok {
      match => {"temp_message" => [ "%{DATA:dpObjectType}\(%{DATA:dpObjectName}\):%{SPACE}\[%{IP:dpSourceIP}\]%{GREEDYDATA:temp_message}",
                                    "%{DATA:dpObjectType}\(%{DATA:dpObjectName}\):%{GREEDYDATA:temp_message}",
                                    "trans\(%{NUMBER:dpTransId}\)\[%{IP:dpSourceIP}\]%{SPACE}gtid\(%{BASE16NUM:dpGlobalTransId}\)%{GREEDYDATA:temp_message}",
                                    "rule%{SPACE}\(%{DATA:dpRule}\):%{SPACE}%{GREEDYDATA:temp_message}"
                                  ]}
      overwrite => [ "temp_message" ]
    }
  }
    
  grok {
    match => {"temp_message" => [ ":%{SPACE}%{GREEDYDATA:dpMessage}",
                                  "%{GREEDYDATA:dpMessage}"
                                ] }
  }

  geoip {
    source => "dpSourceIP"
  }

  date {
    match => [ "timestamp", "ISO8601"]
  }  

  mutate {
    remove_field => [ "temp_message",
                      "timestamp",
                      "message",
                      "dpObjectType",
                      "dpObject",
                      "dpName",
                      "type",
                      "seqNr",
                      "port",
                      "host", 
                      "[geoip][latitude]",
                      "[geoip][longitude]",
                      "[geoip][timezone]",
                      "[geoip][postal_code]",
                      "[geoip][region_code]",
                      "[geoip][country_code2]",
                      "[geoip][country_code3]",
                      "[geoip][region_name]",
                      "[geoip][ip]",
                      "[geoip][continent_code]"
                      ]
    remove_tag => [ "_grokparsefailure", 
                    "_geoip_lookup_failure",
                    "filter1"]
  }
}
